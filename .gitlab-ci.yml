stages:
  - test
  - prep
  - build
  - upload
  - release

variables:
  GIT_STRATEGY: fetch
  GIT_DEPTH: "0"

test-plugin:
  stage: test
  image: golang:1.23.0
  script:
    - go mod tidy
    - go test -cover
  coverage: '/^coverage: (\d+\.\d+)% of statements$/'

set-target-tag:
  stage: prep
  rules:
    - if: '$CI_COMMIT_TAG'                    # just use the tag
    - if: '$CI_PIPELINE_SOURCE == "schedule"' # find latest tag
  tags:
    - unprivileged
  image: alpine
  before_script:
    - apk add --no-cache git
  script: |
    set -euo pipefail
    if [ -n "${CI_COMMIT_TAG:-}" ]; then
      echo "TARGET_TAG=$CI_COMMIT_TAG" > target.env
    else
      git fetch --tags --force --prune
      LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
      if [ -z "$LATEST_TAG" ]; then
        echo "Kein Git-Tag gefunden. Abbruch." >&2
        exit 1
      fi
      echo "TARGET_TAG=$LATEST_TAG" > target.env
    fi
    cat target.env
  artifacts:
    reports:
      dotenv: target.env

get-gotify-data:
  stage: prep
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  tags:
    - unprivileged
  image: alpine
  before_script:
    - apk add --no-cache curl jq
  script:
    - export GOTIFY_VERSION=$(curl -s https://api.github.com/repos/gotify/server/releases/latest | jq -r .tag_name)
    - export GO_VERSION=$(curl -s https://raw.githubusercontent.com/gotify/server/${GOTIFY_VERSION}/GO_VERSION)
    - echo "GOTIFY_VERSION=$GOTIFY_VERSION" > gotify-data.env
    - echo "GO_VERSION=$GO_VERSION" >> gotify-data.env
    # just for debugging
    - cat gotify-data.env
  artifacts:
    reports:
      dotenv: gotify-data.env

build-plugin:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  tags:
    - docker
    - real-dind
  image: docker:cli
  needs:
    - job: set-target-tag
      artifacts: true
    - job: get-gotify-data
      artifacts: true
  before_script:
    - apk add --no-cache go make
    # checkout latest tag on scheduled pipeline to update the release assets later
    - |
      if [ "${CI_PIPELINE_SOURCE:-}" = "schedule" ]; then
        git fetch --tags --force --prune
        git checkout "$TARGET_TAG"
      fi
  script:
    # just for debugging
    - echo $TARGET_TAG
    - echo $GOTIFY_VERSION
    - echo $GO_VERSION
    # actual build
    - make download-tools GOTIFY_VERSION=$GOTIFY_VERSION
    - make build GOTIFY_VERSION=$GOTIFY_VERSION
  artifacts:
    when: on_success
    expire_in: 1 day
    paths:
      - build

push-plugin:
  stage: upload
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  needs:
    - job: set-target-tag
      artifacts: true
    - job: get-gotify-data
      artifacts: true
    - job: build-plugin
      artifacts: true
  image: curlimages/curl
  script:
    # just for debugging
    - echo $TARGET_TAG
    - echo $GOTIFY_VERSION
    - echo $GO_VERSION
    # check if upload already exists
    - curl --head --output /dev/null --fail "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-amd64.so" && echo "Package already exists!" && exit 2
    # upload
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-postal-webhooks-linux-amd64.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-amd64.so"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-postal-webhooks-linux-arm-7.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm-7.so"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file build/gotify-postal-webhooks-linux-arm64.so "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm64.so"'
    - echo "PACKAGE_UPLOADED=true" >> upload.env
    # just for debugging
    - cat upload.env
  allow_failure:
    exit_codes: [2]
  artifacts:
    reports:
      dotenv: upload.env

create-release:
  stage: release
  rules: # only run on manual tagging
    - if: '$CI_COMMIT_TAG && $CI_PIPELINE_SOURCE != "schedule"'
    - when: never
  needs:
    - job: set-target-tag
      artifacts: true
    - job: get-gotify-data
      artifacts: true
    - job: push-plugin
      artifacts: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - '[ "$PACKAGE_UPLOADED" = "true" ] || (echo "Skipping release, package was not uploaded"; exit 2)'
    - echo "Releasing ${TARGET_TAG}"
  release:
    name: "Release ${TARGET_TAG}"
    description: "Release of the Gotify Postal Webhooks Plugin version ${TARGET_TAG}. Includes multiple plugin versions (updated periodically) to match all upstream Gotify versions. Please check the Gotify version in the filename."
    tag_name: "$TARGET_TAG"
    assets:
      links:
        - name: gotify-postal-webhooks-linux-amd64.so (built for Gotify ${GOTIFY_VERSION})
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-amd64.so"
          link_type: package
        - name: gotify-postal-webhooks-linux-arm-7.so (built for Gotify ${GOTIFY_VERSION})
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm-7.so"
          link_type: package
        - name: gotify-postal-webhooks-linux-arm64.so (built for Gotify ${GOTIFY_VERSION})
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm64.so"
          link_type: package
  allow_failure:
    exit_codes: [2]

update-release-assets:
  stage: release
  rules: # only run on scheduled pipelines
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - when: never
  needs:
    - job: set-target-tag
      artifacts: true
    - job: get-gotify-data
      artifacts: true
    - job: push-plugin
      artifacts: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - '[ "${PACKAGE_UPLOADED:-}" = "true" ] || (echo "Skipping update, package not uploaded"; exit 2)'
    - echo "Updating release assets for tag ${TARGET_TAG}"
    - NAME_SUFFIX="(built for Gotify ${GOTIFY_VERSION})"
    - release-cli update --tag-name "$TARGET_TAG" \
        --assets-link "{\"name\":\"gotify-postal-webhooks-linux-amd64.so ${NAME_SUFFIX}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-amd64.so\"}" \
        --assets-link "{\"name\":\"gotify-postal-webhooks-linux-arm-7.so ${NAME_SUFFIX}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm-7.so\"}" \
        --assets-link "{\"name\":\"gotify-postal-webhooks-linux-arm64.so ${NAME_SUFFIX}\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gotify-postal-webhooks/${TARGET_TAG}-gotify_${GOTIFY_VERSION}-go_${GO_VERSION}/gotify-postal-webhooks-linux-arm64.so\"}"
  allow_failure:
    exit_codes: [2]
